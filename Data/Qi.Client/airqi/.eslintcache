[{"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\index.js":"1","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\App.js":"2","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\reportWebVitals.js":"3","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\Dashboard.js":"4","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\Map.js":"5","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\locations.tsx":"6"},{"size":494,"mtime":1608225555109,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1608218200537,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1607718255021,"results":"10","hashOfConfig":"8"},{"size":3315,"mtime":1608228368656,"results":"11","hashOfConfig":"8"},{"size":2068,"mtime":1611055966698,"results":"12","hashOfConfig":"8"},{"size":1289,"mtime":1611006273950,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1otbmhi",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\index.js",[],["29","30"],"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\App.js",[],"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\reportWebVitals.js",[],"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\Dashboard.js",["31"],"// https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\n//\r\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport useSwr from \"swr\";\r\n\r\n// Data fetching method\r\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\nexport default function Dashboard() {\r\n\r\n    const [hubConnection, setHubConnection] = useState(null);\r\n    \r\n    // Load and prepare data\r\n    const { data, error } = useSwr(process.env.REACT_APP_API_URL + \"api/stations\", fetcher);\r\n    const stations = (data && !error) ? data : [];\r\n    \r\n    useEffect(() => {\r\n        // Create Hub Connection.\r\n        const createHubConnection = async () => {\r\n\r\n            const hubConnect = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_API_URL + \"livestations\")\r\n            .withAutomaticReconnect()\r\n            .build();\r\n            \r\n            // Set the initial SignalR Hub Connection.\r\n            setHubConnection(hubConnect);\r\n            \r\n        }\r\n\r\n        createHubConnection();\r\n    }, []);\r\n    \r\n    // Websocket\r\n    useEffect(() => {\r\n\r\n        const startHubConnection = async () => {\r\n            if (hubConnection) {\r\n                await hubConnection\r\n                    .start()\r\n                    .then((result) => {\r\n                        console.log(\"SignalR Connected!\");\r\n\r\n                        hubConnection.on(\"GetNewStationsAsync\", (stations) => {\r\n                            console.log(\"New Updated Data\");\r\n                            console.log(stations);\r\n                            this.stations = stations;\r\n                        });\r\n                    })\r\n                    .catch((e) => console.log(\"Connection failed: \", e));\r\n            }\r\n        }\r\n         \r\n        startHubConnection();\r\n\r\n    }, [hubConnection]);\r\n\r\n\r\n    // Render the information\r\n    const { SearchBar } = Search;\r\n\r\n    const columns = [{\r\n        dataField: 'id',\r\n        text: '_id',\r\n        sort: true\r\n      }, {\r\n        dataField: 'location',\r\n        text: 'Name',\r\n        sort: true\r\n      }, {\r\n        dataField: 'city',\r\n        text: 'City',\r\n        sort: true\r\n      }, {\r\n        dataField: 'country',\r\n        text: 'Country',\r\n        // filter: textFilter(),\r\n        sort: true\r\n      }, {\r\n        dataField: 'aqi',\r\n        text: 'Aqi',\r\n        sort: true\r\n    }];\r\n    \r\n    return(\r\n        <Container>\r\n            <ToolkitProvider keyField=\"id\" data={stations} columns={columns} search>\r\n            {\r\n                props => (\r\n                <div>\r\n                    <h3>AirQi Stations Data </h3>\r\n                    <SearchBar { ...props.searchProps } />\r\n                    <BootstrapTable { ...props.baseProps } filter={filterFactory()} pagination={paginationFactory()} striped hover />\r\n                </div>\r\n                )\r\n            }\r\n            </ToolkitProvider>\r\n        </Container>\r\n    );\r\n\r\n} ","C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\Map.js",[],"C:\\Users\\mihai\\Documents\\Git\\airqi-project\\Data\\Qi.Client\\airqi\\src\\components\\locations.tsx",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":4,"column":25,"nodeType":"40","messageId":"41","endLine":4,"endColumn":35},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'textFilter' is defined but never used.","Identifier","unusedVar",["44"],["45"],"no-global-assign","no-unsafe-negation"]